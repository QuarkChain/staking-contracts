const { expect } = require("chai");
const { ethers } = require("hardhat");
const { BigNumber } = require("ethers");

const BlockRlpBytes =
  "0xf903a9f903a4a0112233445566778899001122334455667788990011223344556677889900aabba0000033445566778899001122334455667788990011223344556677889900aabb94d76fb45ed105f1851d74233f884d256c4fdad634a01100000000000000000000000000000000000000000000000000000000000011a02200000000000000000000000000000000000000000000000000000000000022a03300000000000000000000000000000000000000000000000000000000000033baf88227118703328b9554a1b68501dce452ff8405e30a3cb8950301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102a04400000000000000000000000000000000000000000000000000000000000044880102030405060708820309830c9f1bf85494aa000000000000000000000000000000000000aa94bb000000000000000000000000000000000000bb94dd000000000000000000000000000000000000bb94cc000000000000000000000000000000000000bbc401020304a0cc000000000000000000000000000000000000000000000000000000000000ccf8886402a0cc000000000000000000000000000000000000000000000000000000000000aaf863df0294aa000000000000000000000000000000000000aa8203e8850102030405e00294bb000000000000000000000000000000000000bb8203e986010203040506e10294cc000000000000000000000000000000000000cc8203ea8701020304050607c0c0";
let nextValidators = [
  "0xAa000000000000000000000000000000000000Aa",
  "0xbB000000000000000000000000000000000000bb",
  "0xDD000000000000000000000000000000000000Bb",
  "0xcc000000000000000000000000000000000000BB",
];

let nextValidatorPowers = [BigNumber.from(1), BigNumber.from(2), BigNumber.from(3), BigNumber.from(4)];

function check(f, got, want) {
  expect(got).to.eq(want);
}

function checkArray(f, got, want) {
  got.forEach((v, i) => {
    expect(v).to.eq(want[i]);
  });
}

describe("decode block test", function () {
  let db;
  beforeEach(async () => {
    let factory = await ethers.getContractFactory("DecodeBlockTest");
    db = await factory.deploy();
    await db.deployed();
  });

  it("decode Header", async function () {
    let res = await db.DecodeHeaderTest(BlockRlpBytes);

    console.log(res.commit);

    check("ParentHash", res.hashData.ParentHash, "0x112233445566778899001122334455667788990011223344556677889900aabb");
    check("UncleHash", res.hashData.UncleHash, "0x000033445566778899001122334455667788990011223344556677889900aabb");
    check("Coinbase", res.hashData.Coinbase, "0xD76Fb45Ed105f1851D74233f884D256C4FdAd634");
    check("Root", res.hashData.Root, "0x1100000000000000000000000000000000000000000000000000000000000011");
    check("TxHash", res.hashData.TxHash, "0x2200000000000000000000000000000000000000000000000000000000000022");
    check(
      "ReceiptHash",
      res.hashData.ReceiptHash,
      "0x3300000000000000000000000000000000000000000000000000000000000033"
    );

    check("Difficulty", res.baseData.Difficulty, BigNumber.from(11000));
    check("Number", res.baseData.Number, BigNumber.from(10001));
    check("GasLimit", res.baseData.GasLimit, BigNumber.from(900000017326518));
    check("GasUsed", res.baseData.GasUsed, BigNumber.from(8000918271));
    check("Time", res.baseData.Time, BigNumber.from(98765372));
    check(
      "Extra",
      res.baseData.Extra,
      "0x0301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102"
    );
    check("MixDigest", res.baseData.MixDigest, "0x4400000000000000000000000000000000000000000000000000000000000044");
    check("Nonce", res.baseData.Nonce, "0x0102030405060708");
    check("BaseFee", res.baseData.BaseFee, BigNumber.from(777));

    check("TimeMs", res.validatorData.TimeMs, BigNumber.from(827163));
    checkArray("NextValidators", res.validatorData.NextValidators, nextValidators);
    checkArray("NextValidatorPowers", res.validatorData.NextValidatorPowers, nextValidatorPowers);
    check(
      "LastCommitHash",
      res.validatorData.LastCommitHash,
      "0xcc000000000000000000000000000000000000000000000000000000000000cc"
    );

    check("TimeMs", res.validatorData.TimeMs, BigNumber.from(827163));
    checkArray("NextValidators", res.validatorData.NextValidators, nextValidators);
    checkArray("NextValidatorPowers", res.validatorData.NextValidatorPowers, nextValidatorPowers);
    check(
      "LastCommitHash",
      res.validatorData.LastCommitHash,
      "0xcc000000000000000000000000000000000000000000000000000000000000cc"
    );

    check("Commit.Height", res.commit.Height, BigNumber.from(100));
    check("Commit.Round", res.commit.Round, 2);
    check("Commit.BlockID", res.commit.BlockID, "0xcc000000000000000000000000000000000000000000000000000000000000aa");

    // check("Signatures", res.commit.Signatures , [])
  });

  it("decode hashData", async function () {
    let res = await db.DecodeHashDataTest(BlockRlpBytes);
    check("ParentHash", res.ParentHash, "0x112233445566778899001122334455667788990011223344556677889900aabb");
    check("UncleHash", res.UncleHash, "0x000033445566778899001122334455667788990011223344556677889900aabb");
    check("Coinbase", res.Coinbase, "0xD76Fb45Ed105f1851D74233f884D256C4FdAd634");
    check("Root", res.Root, "0x1100000000000000000000000000000000000000000000000000000000000011");
    check("TxHash", res.TxHash, "0x2200000000000000000000000000000000000000000000000000000000000022");
    check("ReceiptHash", res.ReceiptHash, "0x3300000000000000000000000000000000000000000000000000000000000033");
  });

  it("decode baseData", async function () {
    let res = await db.DecodeBaseDataTest(BlockRlpBytes);

    check("Difficulty", res.Difficulty, BigNumber.from(11000));
    check("Number", res.Number, BigNumber.from(10001));
    check("GasLimit", res.GasLimit, BigNumber.from(900000017326518));
    check("GasUsed", res.GasUsed, BigNumber.from(8000918271));
    check("Time", res.Time, BigNumber.from(98765372));
    check(
      "Extra",
      res.Extra,
      "0x0301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102"
    );
    check("MixDigest", res.MixDigest, "0x4400000000000000000000000000000000000000000000000000000000000044");
    check("Nonce", res.Nonce, "0x0102030405060708");
    check("BaseFee", res.BaseFee, BigNumber.from(777));
  });

  it("decode ValidatorData", async function () {
    let res = await db.DecodeValidatorDataTest(BlockRlpBytes);

    check("TimeMs", res.TimeMs, BigNumber.from(827163));
    checkArray("NextValidators", res.NextValidators, nextValidators);
    checkArray("NextValidatorPowers", res.NextValidatorPowers, nextValidatorPowers);
    check("LastCommitHash", res.LastCommitHash, "0xcc000000000000000000000000000000000000000000000000000000000000cc");
  });

  it("decode NextValidators", async function () {
    // only one validator
    let oneValidator = ["0xAa000000000000000000000000000000000000Aa"];
    const OneValidatorRlpBytes =
      "0xf902faf902f5a0112233445566778899001122334455667788990011223344556677889900aabba0000033445566778899001122334455667788990011223344556677889900aabb94d76fb45ed105f1851d74233f884d256c4fdad634a01100000000000000000000000000000000000000000000000000000000000011a02200000000000000000000000000000000000000000000000000000000000022a03300000000000000000000000000000000000000000000000000000000000033baf88227118703328b9554a1b68501dce452ff8405e30a3cb8b00101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101a04400000000000000000000000000000000000000000000000000000000000044880102030405060708820309830c9f1bd594aa000000000000000000000000000000000000aac401020304a0cc000000000000000000000000000000000000000000000000000000000000ccc0c0";
    let res = await db.DecodeNextValidatorsTest(OneValidatorRlpBytes);
    checkArray("NextValidators", res, oneValidator);

    // more than one validator
    res = await db.DecodeNextValidatorsTest(BlockRlpBytes);
    checkArray("NextValidators", res, nextValidators);
  });

  it("decode commit", async function () {
    let res = await db.DecodeCommitTest(BlockRlpBytes);
    check("Commit.Height", res.Height, BigNumber.from(100));
    check("Commit.Round", res.Round, 2);
    check("Commit.BlockID", res.BlockID, "0xcc000000000000000000000000000000000000000000000000000000000000aa");

    console.log(res.Signatures)

    let sig0 = [
      2,
      '0xAa000000000000000000000000000000000000Aa',
      BigNumber.from(1000),
      '0x0102030405',
    ]
    checkArray("Commit.Signatures[0]", res.Signatures[0], sig0)

    let sig1 = [
      2,
      '0xbB000000000000000000000000000000000000bb',
      BigNumber.from(1001),
      '0x010203040506',
    ]
    checkArray("Commit.Signatures[1]", res.Signatures[1], sig1)


    let sig2 = [
      2,
      '0xCC000000000000000000000000000000000000cC',
      BigNumber.from(1002),
      '0x01020304050607',
    ]
    checkArray("Commit.Signatures[1]", res.Signatures[2], sig2)
  });

  
});
